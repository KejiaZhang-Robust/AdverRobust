import torch.backends.cudnn as cudnn
from models import *
from SSA_attack import *
from easydict import EasyDict
import yaml
import logging
import os

from utils import *

device = 'cuda' if torch.cuda.is_available() else 'cpu'

with open('configs_test_transfer.yml') as f:
    config = EasyDict(yaml.load(f,Loader=yaml.FullLoader))

#TODO: Model generate the atack
net = WRN34_10()
#TODO: Model defense the atack
test_net = ResNet18()

data_set = config.DATA.Data
file_name_generate = config.Operation.Prefix_generate
file_name_test = config.Operation.Prefix_test
check_path_generate = os.path.join('./checkpoint',data_set, file_name_generate)
check_path_test = os.path.join('./checkpoint', data_set, file_name_test)
record_path = os.path.join(check_path_test, file_name_generate+config.Operation.Record_string+'_record.txt')

logger = logging.getLogger(__name__)
logging.basicConfig(
    format='[%(asctime)s] - %(message)s',
    datefmt='%Y/%m/%d %H:%M:%S',
    level=logging.DEBUG,
    handlers=[
        logging.FileHandler(os.path.join(check_path_test, file_name_generate + 'transfer_test.log')),
        logging.StreamHandler()
    ])
logger.info(config.Operation.Record_string)

_, test_loader = create_dataloader(data_set, Norm=False)

norm_mean = torch.tensor(config.DATA.mean).to(device)
norm_std = torch.tensor(config.DATA.std).to(device)

net.num_classes = config.DATA.num_class
net.norm = True
net.mean = norm_mean
net.std = norm_std

test_net.num_classes = config.DATA.num_class
test_net.norm = True
test_net.mean = norm_mean
test_net.std = norm_std

net = net.to(device)
net = torch.nn.DataParallel(net)  # parallel GPU
test_net = test_net.to(device)
test_net = torch.nn.DataParallel(test_net)
cudnn.benchmark = True

logger.info(config.Operation.Addtional_string+"\n=====Adversarial Attack Performance=====:\n"+"Adversarial Examples are generated by: "+ file_name_generate+ "||     Adversarial Defense are operated by:"+file_name_test+'\n')

print("==> Loading model:"+file_name_generate+"\n")
assert os.path.isdir(check_path_generate), 'Error: no generate model checkpoint directory found!'
print("==> Loading model:"+file_name_test+"\n")
assert os.path.isdir(check_path_test), 'Error: no test model checkpoint directory found!'
checkpoint_best_generate = torch.load(os.path.join(check_path_generate, 'model_best.pth.tar'))
checkpoint_best_test = torch.load(os.path.join(check_path_test, 'model_best.pth.tar'))

net.load_state_dict(checkpoint_best_generate['state_dict'])
test_net.load_state_dict(checkpoint_best_test['state_dict'])

pgd_acc = evaluate_SSA(net, test_net, test_loader, eps=16.0)
logger.info(f"SSA_attack:[nb_iter:{16.0}]->pgd_acc: {pgd_acc: .2f}")